<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/table-code/src/app/dashboard/page.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/table-code/src/app/dashboard/page.tsx" />
              <option name="updatedContent" value="&quot;use client&quot;&#10;&#10;import { useEffect, useState } from &quot;react&quot;&#10;import { useRouter } from &quot;next/navigation&quot;&#10;import { Button } from &quot;@/components/ui/button&quot;&#10;import { Input } from &quot;@/components/ui/input&quot;&#10;import { Label } from &quot;@/components/ui/label&quot;&#10;import { Card } from &quot;@/components/ui/card&quot;&#10;import { Trade } from &quot;@/components/Tanstack-table&quot;&#10;&#10;export default function Dashboard() {&#10;  const router = useRouter()&#10;  const [prices, setPrices] = useState&lt;Record&lt;string, number&gt;&gt;({})&#10;  const [trades, setTrades] = useState&lt;Trade[]&gt;([])&#10;&#10;  useEffect(() =&gt; {&#10;    // Check if user is authenticated&#10;    const isAuthenticated = sessionStorage.getItem(&quot;isAdminAuthenticated&quot;)&#10;    if (!isAuthenticated) {&#10;      router.push(&quot;/admin-login&quot;)&#10;    }&#10;&#10;    // Load existing trades&#10;    // In a real application, this would come from your database&#10;    const loadedTrades = JSON.parse(localStorage.getItem(&quot;trades&quot;) || &quot;[]&quot;)&#10;    setTrades(loadedTrades)&#10;  }, [router])&#10;&#10;  const handlePriceChange = (id: string, value: string) =&gt; {&#10;    setPrices(prev =&gt; ({&#10;      ...prev,&#10;      [id]: parseFloat(value) || 0&#10;    }))&#10;  }&#10;&#10;  const handleUpdatePrices = () =&gt; {&#10;    const updatedTrades = trades.map(trade =&gt; ({&#10;      ...trade,&#10;      price: prices[trade.id] || trade.price&#10;    }))&#10;&#10;    // In a real application, this would be an API call&#10;    localStorage.setItem(&quot;trades&quot;, JSON.stringify(updatedTrades))&#10;    setTrades(updatedTrades)&#10;    alert(&quot;Prices updated successfully!&quot;)&#10;  }&#10;&#10;  return (&#10;    &lt;div className=&quot;p-8&quot;&gt;&#10;      &lt;Card className=&quot;p-6&quot;&gt;&#10;        &lt;div className=&quot;flex justify-between items-center mb-6&quot;&gt;&#10;          &lt;h1 className=&quot;text-2xl font-bold&quot;&gt;Price Management Dashboard&lt;/h1&gt;&#10;          &lt;Button &#10;            variant=&quot;outline&quot; &#10;            onClick={() =&gt; {&#10;              sessionStorage.removeItem(&quot;isAdminAuthenticated&quot;)&#10;              router.push(&quot;/admin-login&quot;)&#10;            }}&#10;          &gt;&#10;            Logout&#10;          &lt;/Button&gt;&#10;        &lt;/div&gt;&#10;&#10;        &lt;div className=&quot;space-y-4&quot;&gt;&#10;          {trades.map(trade =&gt; (&#10;            &lt;div key={trade.id} className=&quot;flex items-center gap-4&quot;&gt;&#10;              &lt;div className=&quot;w-1/3&quot;&gt;&#10;                &lt;Label&gt;{trade.name}&lt;/Label&gt;&#10;              &lt;/div&gt;&#10;              &lt;div className=&quot;w-1/3&quot;&gt;&#10;                &lt;Label&gt;Current Price: ${trade.price}&lt;/Label&gt;&#10;              &lt;/div&gt;&#10;              &lt;div className=&quot;w-1/3&quot;&gt;&#10;                &lt;Input&#10;                  type=&quot;number&quot;&#10;                  placeholder=&quot;New Price&quot;&#10;                  value={prices[trade.id] || &quot;&quot;}&#10;                  onChange={(e) =&gt; handlePriceChange(trade.id, e.target.value)}&#10;                /&gt;&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;          ))}&#10;&#10;          &lt;Button &#10;            className=&quot;w-full mt-4&quot; &#10;            onClick={handleUpdatePrices}&#10;          &gt;&#10;            Update Prices&#10;          &lt;/Button&gt;&#10;        &lt;/div&gt;&#10;      &lt;/Card&gt;&#10;    &lt;/div&gt;&#10;  )&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/table-code/src/middleware.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/table-code/src/middleware.ts" />
              <option name="updatedContent" value="import { NextResponse } from 'next/server'&#10;import type { NextRequest } from 'next/server'&#10;&#10;export function middleware(request: NextRequest) {&#10;  // Check if the route is dashboard&#10;  if (request.nextUrl.pathname.startsWith('/dashboard')) {&#10;    // Check for admin authentication&#10;    const isAuthenticated = request.cookies.get('adminAuth')?.value&#10;&#10;    if (!isAuthenticated) {&#10;      // Redirect to admin login if not authenticated&#10;      return NextResponse.redirect(new URL('/admin-login', request.url))&#10;    }&#10;  }&#10;&#10;  return NextResponse.next()&#10;}&#10;&#10;export const config = {&#10;  matcher: '/dashboard/:path*'&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>